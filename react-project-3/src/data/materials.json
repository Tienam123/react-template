[
  {
    "title": "Початок роботи",
    "body": "React — це JavaScript-бібліотека для створення інтерфейсів користувача. Відвідайте нашу головну сторінку або вступ, аби скласти перше враження про React.",
    "href": "https://uk.legacy.reactjs.org/docs/getting-started.html"
  },
  {
    "title": "Вступ до JSX",
    "body": "Цей кумедний синтаксис тегів не є ні рядком, ні HTML.Він має назву JSX, і це розширення синтаксису для JavaScript. Ми рекомендуємо використовувати його в React, щоб описати, як повинен виглядати інтерфейс користувача. JSX може нагадувати мову шаблонів, але з усіма перевагами JavaScript.JSX створює “React-елементи”. Ми розглянемо їх рендеринг в DOM в наступному розділі. Нижче ви можете знайти основи JSX, необхідні для початку роботи.",
    "href": "https://uk.legacy.reactjs.org/docs/introducing-jsx.html"
  },
  {
    "title": "Рендеринг елементів",
    "body": "Припустимо, що у вашому HTML файлі існує <div>:<div id='root'></div>Ми називаємо його “кореневим” DOM вузлом, тому що все всередині нього буде керуватись за допомогою React DOM.Додатки створені за допомогою самого лише React, зазвичай мають лише один кореневий вузол DOM. Якщо ви інтегруєте React в існуючий додаток — ви можете мати будь-яку кількість ізольованих кореневих DOM вузлів.Для рендерингу React-елементу в кореневому DOM вузлі, викличте функцію ReactDOM.render() з React-елементом та кореневим DOM вузлом у якості аргументів:",
    "href": "https://uk.legacy.reactjs.org/docs/rendering-elements.html"
  },
  {
    "title": "Умовний рендеринг",
    "body": "React дозволяє розподілити логіку на окремі компоненти. Ці компоненти можна показувати або ховати в залежності від поточного стану додатку.Умовний рендеринг у React працює так само, як і умовні вирази працюють в JavaScript. Іноді потрібно пояснити React, як стан впливає на те, які компоненти треба сховати, а які — відрендерити, та яксаме. Для цього використовуйте умовний оператор JavaScript, або вирази подібні до if.",
    "href": ""
  }
]
